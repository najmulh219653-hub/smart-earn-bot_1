import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import datetime
import logging

# ‚≠ê ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‚≠ê
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- ‡ßß. ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶® (SETTINGS) ---

# BotFather ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶®
TELEGRAM_BOT_TOKEN = "8400259678:AAEitXXzCj4pB3HIj5DhW_eOsCXwonGOolI" 
# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶á‡¶°‡¶ø)
ADMIN_USER_ID = 7229488567

# ‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Adsterra Smart Link
ADSTERRA_DIRECT_LINK = "https://roughlydispleasureslayer.com/ykawxa7tnr?key=bacb6ca047e4fabf73e54c2eaf85b2a5" 
# ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶™‡ßá‡¶ú
TASK_LANDING_PAGE = "https://newspaper.42web.io"

# --- ‚≠ê ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‚≠ê ---
CHANNEL_USERNAME = "@EarnQuickOfficial"
CHANNEL_INVITE_LINK = "https://t.me/EarnQuickOfficial"
WHATSAPP_LINK = None 

# --- ‚≠ê ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶ì ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‚≠ê ---
DAILY_REWARD_POINTS = 10 
REFERRAL_JOIN_BONUS = 50 
REFERRAL_DAILY_COMMISSION = 2
MIN_WITHDRAW_POINTS = 1000 

# --- ‡ß®. ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú (Temporary Storage) ---
# {user_id: {'points': 0, 'last_claim_date': None, 'referrer_id': None, 'username': '...'} }
user_data = {} 

# --- ‡ß©. ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶ö‡ßá‡¶ï ---

async def check_channel_member(context: ContextTypes.DEFAULT_TYPE, user_id):
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßá"""
    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.warning(f"‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶™‡¶¶ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}") 
        return False 

async def show_join_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∂‡¶∞‡ßç‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü"""
    join_message = (
        f"‚õî **‡¶ï‡¶æ‡¶ú ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï!**\n\n"
        f"‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ö‡¶´‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá‡¶á ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§"
    )
    
    join_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîî ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", url=CHANNEL_INVITE_LINK)],
        [InlineKeyboardButton("‚úÖ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®", callback_data='check_join')]
    ])
    
    if update.callback_query:
        await update.callback_query.edit_message_text(join_message, reply_markup=join_keyboard, parse_mode=telegram.constants.ParseMode.MARKDOWN)
    else:
        await update.message.reply_text(join_message, reply_markup=join_keyboard, parse_mode=telegram.constants.ParseMode.MARKDOWN)


# --- ‡ß™. ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶§‡ßà‡¶∞‡¶ø (‡ß™‡¶ü‡¶ø ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶∏‡¶π) ---

def get_main_keyboard(user_id):
    """‡¶¨‡¶ü‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá"""
    current_points = user_data.get(user_id, {}).get('points', 0)
    
    keyboard = [
        # --- ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ---
        [InlineKeyboardButton("üí∞ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data='daily_reward')],
        [InlineKeyboardButton("üì∞ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡ßß: ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ñ‡¶¨‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®", url=TASK_LANDING_PAGE)],
        [InlineKeyboardButton("üîó ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡ß®: ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®", url=TASK_LANDING_PAGE)],
        [InlineKeyboardButton("üß† ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡ß©: ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶ñ‡ßá‡¶≤‡ßÅ‡¶®", url=TASK_LANDING_PAGE)],
        # --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ì ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡ßü‡¶æ‡¶≤ ---
        [InlineKeyboardButton(f"üìä ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {current_points} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü", callback_data='my_account')],
        [InlineKeyboardButton("üí∏ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡ßü‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü", callback_data='withdraw_request')],
    ]
    return InlineKeyboardMarkup(keyboard)

# --- ‡ß´. ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (COMMAND HANDLERS) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    
    logger.info(f"User {user_id} ({username}) started the bot.")
    
    # --- ‚≠ê ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ú‡¶Ø‡¶º‡ßá‡¶®‡¶ø‡¶Ç ‡¶∂‡¶∞‡ßç‡¶§ ---
    is_member = await check_channel_member(context, user_id)
    if not is_member:
        await show_join_prompt(update, context)
        return
    
    # --- ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç ---
    referrer_id = None
    if context.args and context.args[0].startswith('ref'):
        try:
            referrer_id = int(context.args[0][3:])
        except ValueError:
            referrer_id = None
            
    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶π‡¶≤‡ßá ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    if user_id not in user_data:
        user_data[user_id] = {'points': 0, 'last_claim_date': None, 'referrer_id': referrer_id, 'username': username}
        logger.info(f"New user registered: {user_id}")
        
        # ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡¶æ‡¶∞‡¶ï‡ßá ‡¶ú‡ßü‡ßá‡¶®‡¶ø‡¶Ç ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
        if referrer_id and referrer_id in user_data:
            user_data[referrer_id]['points'] += REFERRAL_JOIN_BONUS 
            logger.info(f"Referral bonus {REFERRAL_JOIN_BONUS} added to referrer {referrer_id}")
            try:
                await context.bot.send_message(
                    chat_id=referrer_id, 
                    text=f"üéÅ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ({username}) ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶ø **{REFERRAL_JOIN_BONUS} ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü** ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§"
                )
            except telegram.error.BadRequest:
                pass 

    welcome_message = (
        f"üéâ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, **{username}**!\n\n"
        "‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ú‡ßü‡ßá‡¶®‡¶ø‡¶Ç ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§\n"
        "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ü‡ßü‡ßá‡¶∞ ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶ö‡¶æ‡¶¨‡¶ø‡¶ï‡¶æ‡¶†‡¶ø ‡¶è‡¶ü‡¶æ‡¶á! ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    )
    
    reply_markup = get_main_keyboard(user_id)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(welcome_message, reply_markup=reply_markup, parse_mode=telegram.constants.ParseMode.MARKDOWN)
    else:
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode=telegram.constants.ParseMode.MARKDOWN)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    
    logger.info(f"User {user_id} pressed button: {query.data}")

    # --- ‚≠ê ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ú‡¶Ø‡¶º‡ßá‡¶®‡¶ø‡¶Ç ‡¶ö‡ßá‡¶ï ---
    is_member = await check_channel_member(context, user_id)
    if not is_member and query.data not in ['check_join', 'start_menu_btn']:
        await show_join_prompt(update, context)
        return

    # --- ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ö‡ßá‡¶ï ‡¶¨‡¶æ‡¶ü‡¶® ---
    if query.data == 'check_join':
        is_member_after_check = await check_channel_member(context, user_id)
        if is_member_after_check:
            logger.info(f"User {user_id} successfully joined channel and proceeded.")
            await start(query, context)
        else:
            await show_join_prompt(update, context)
        return
            
    # --- ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶∞‡¶ø‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ ---
    elif query.data == 'daily_reward':
        today = datetime.date.today()
        last_claim = user_data.get(user_id, {}).get('last_claim_date')

        if last_claim and last_claim == today:
            message = "‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∞‡¶ø‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        else:
            # ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó
            user_data[user_id]['points'] += DAILY_REWARD_POINTS
            user_data[user_id]['last_claim_date'] = today
            logger.info(f"User {user_id} claimed daily reward. New points: {user_data[user_id]['points']}")
            
            # ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡¶æ‡¶∞‡¶ï‡ßá ‡¶ï‡¶Æ‡¶ø‡¶∂‡¶® ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
            referrer_id = user_data[user_id].get('referrer_id')
            if referrer_id and referrer_id in user_data:
                user_data[referrer_id]['points'] += REFERRAL_DAILY_COMMISSION
                logger.info(f"Referrer {referrer_id} received daily commission.")
                try:
                    await context.bot.send_message(
                        chat_id=referrer_id, 
                        text=f"üéÅ ‡¶ï‡¶Æ‡¶ø‡¶∂‡¶®! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶ú ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶∞‡¶ø‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶ø **{REFERRAL_DAILY_COMMISSION} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü** ‡¶™‡ßá‡¶≤‡ßá‡¶®‡•§"
                    )
                except telegram.error.BadRequest:
                    pass 

            message = (
                f"‚úÖ ‡¶∏‡¶´‡¶≤! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú **{DAILY_REWARD_POINTS} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü** ‡¶™‡ßá‡¶≤‡ßá‡¶®‡•§\n"
                f"‡¶Ü‡ßü ‡¶¶‡ßç‡¶¨‡¶ø‡¶ó‡ßÅ‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n"
                f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {user_data[user_id]['points']} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡•§"
            )

        await query.edit_message_text(message, reply_markup=get_main_keyboard(user_id), parse_mode=telegram.constants.ParseMode.MARKDOWN)
    
    # --- ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ---
    elif query.data == 'my_account':
        bot_username = context.bot.username if context.bot.username else "Your_Bot_Username"
        referral_link = f"https://t.me/{bot_username}?start=ref{user_id}"
        
        current_points = user_data[user_id]['points']

        account_info = (
            "üìä **‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ì ‡¶∞‡¶ø‡¶´‡¶æ‡¶∞‡ßá‡¶≤**\n"
            f"‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü: **{current_points}**\n"
            f"‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®: {MIN_WITHDRAW_POINTS} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü\n\n"
            "üîó ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï: \n"
            f"`{referral_link}`\n\n"
            f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶ï‡ßá‡¶â ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶≤‡ßá **{REFERRAL_JOIN_BONUS} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü** ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶∞‡¶ø‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶ø **{REFERRAL_DAILY_COMMISSION} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü** ‡¶ï‡¶Æ‡¶ø‡¶∂‡¶® ‡¶™‡¶æ‡¶¨‡ßá‡¶®!"
        )
        
        back_to_main = InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† ‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data='start_menu_btn')]
        ])
        
        await query.edit_message_text(account_info, reply_markup=back_to_main, parse_mode=telegram.constants.ParseMode.MARKDOWN)

    # --- ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡ßü‡¶æ‡¶≤ ---
    elif query.data == 'withdraw_request':
        current_points = user_data[user_id]['points']
        
        message = ""
        if current_points >= MIN_WITHDRAW_POINTS:
            # ‚úÖ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
            message = (
                f"üí∏ **‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü**\n\n"
                f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü: {current_points}\n"
                f"‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ **‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø** (‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂/‡¶®‡¶ó‡¶¶/‡¶∞‡¶ï‡ßá‡¶ü/‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø) ‡¶è‡¶¨‡¶Ç **‡¶Ü‡¶á‡¶°‡¶ø** ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n"
                "`‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂, 01XXXXXXXXX`\n"
                "`‡¶®‡¶ó‡¶¶, 01XXXXXXXXX`\n"
                "`‡¶∞‡¶ï‡ßá‡¶ü, 01XXXXXXXXX`\n\n"
                "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡¶ü‡¶ø ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶ï‡¶∞‡¶¨‡ßá‡•§"
            )
        else:
            message = (
                f"‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá **{MIN_WITHDRAW_POINTS} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü** ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡•§\n"
                f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü: {current_points}"
            )

        back_to_main = InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† ‡¶Æ‡ßÇ‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ", callback_data='start_menu_btn')]
        ])
        
        await query.edit_message_text(message, reply_markup=back_to_main, parse_mode=telegram.constants.ParseMode.MARKDOWN)

    # --- ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¨‡¶æ‡¶ü‡¶® ---
    elif query.data == 'start_menu_btn':
        await start(query, context)


# --- ‡ß¨. ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞) ---

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # --- ‚≠ê ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°: /addpoints ‚≠ê ---
    if user_id == ADMIN_USER_ID and text.startswith('/addpoints '):
        try:
            parts = text.split()
            target_id = int(parts[1])
            points = int(parts[2])
            
            if target_id in user_data:
                user_data[target_id]['points'] += points
                logger.info(f"Admin {user_id} added {points} to user {target_id}. New points: {user_data[target_id]['points']}")
                
                await update.message.reply_text(f"‚úÖ ‡¶∏‡¶´‡¶≤! ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ {target_id} ‡¶è‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá {points} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü: {user_data[target_id]['points']}")
                
                # ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
                await context.bot.send_message(chat_id=target_id, text=f"üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá **{points} ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü** ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{user_data[target_id]['points']}**")
            else:
                await update.message.reply_text("‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
                
        except (ValueError, IndexError):
            await update.message.reply_text("‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /addpoints <‡¶á‡¶â‡¶ú‡¶æ‡¶∞_‡¶Ü‡¶á‡¶°‡¶ø> <‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü>")
            
    # --- ‚≠ê ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°: /checkuser ‚≠ê ---
    elif user_id == ADMIN_USER_ID and text.startswith('/checkuser '):
        try:
            target_id = int(text.split()[1])
            
            if target_id in user_data:
                u = user_data[target_id]
                info = (
                    f"üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ({target_id}):\n"
                    f"‡¶®‡¶æ‡¶Æ: {u.get('username', 'N/A')}\n"
                    f"‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü: {u['points']}\n"
                    f"‡¶∂‡ßá‡¶∑ ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ: {u['last_claim_date']}\n"
                    f"‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡¶æ‡¶∞ ID: {u['referrer_id']}"
                )
                await update.message.reply_text(info)
            else:
                await update.message.reply_text("‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        except (ValueError, IndexError):
            await update.message.reply_text("‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /checkuser <‡¶á‡¶â‡¶ú‡¶æ‡¶∞_‡¶Ü‡¶á‡¶°‡¶ø>")


    # --- ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú (‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡ßü‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü) ---
    else:
        logger.info(f"Withdrawal request from user {user_id}: {text}")
        # ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡ßü‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶´‡¶∞‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"üí∏ **‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü!**\n"
                 f"‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID: `{user_id}`\n"
                 f"‡¶Æ‡ßá‡¶∏‡ßá‡¶ú: {text}"
        )

        await update.message.reply_text(
            "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø (‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡ßü‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü) ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ü‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶≤‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§\n"
            "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®:",
            reply_markup=get_main_keyboard(user_id)
        )

# --- ‡ß≠. ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã (MAIN EXECUTION) ---

def main() -> None:
    """‡¶¨‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá"""
    
    logger.info("Starting Smart Earn Bot...") 
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler)) 

    print("‚úÖ Smart Earn Bot Running... Check console for logs.")
    application.run_polling(poll_interval=1)

if __name__ == '__main__':
    main()
